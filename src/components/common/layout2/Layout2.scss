.Layout {
	width: 70vw;
	margin: 100px auto;
	min-height: 60vw;
	opacity: 0;
	transform-origin: left top;
	transform: translateY(200px);
	transition-property: opacity, transform;
	transition: opacity 0.5s, transform 1s;

	&.on {
		opacity: 1;
		transform: translateY(0px);

		h1 {
			span {
				opacity: 1;
				transform: scale(1);
			}
		}
	}

	h1 {
		font-size: 0;
		font-weight: normal;
		opacity: 0.5;
		margin-bottom: 10px;

		span {
			font-size: 5rem;
			transform: scale(4);
			opacity: 0;
			transition-property: opacity, transform;
		}
	}

	.bar {
		width: 50px;
		height: 1px;
		background: var(--baseColor);
		opacity: 0.7;
		margin-bottom: 150px;
	}
}

.tablet {
	.Layout {
		width: 80vw;
		margin: 80px auto;
	}
}

/*
	- css : css는 외부 도움 없이 브라우저의 기능만으로 처리 가능 (스타일만 제어 가능)
	- css변수 : 스타일 관련 값만 담을 수 있음. (@media 쿼리 내 디바이스의 폭 같은 것처럼, 브라우저가 제어해야 되는 값들은 할당 	불가)
	- scss : css 내부기능 뿐만 아니라, 브라우저 기능까지 활용한 문법 (일반 css로 컴파일 필요)
	- scss변수 : 브라우저가 인식해야되는 @media 쿼리 내의 디바이스 폭 조차도 변수에 담을 수 있음. 

	react에서 scss 변수를 활용하는 경우의 문제점
	: scss는 한 번 컴파일되고 나면, 컴파일 시점의 구문으로 값이 고정이 됨, 따라서 리액트에서 추후 이벤트를 통해 scss 변수의 값을 변경할 수 없음.

	css의 변수는 컴파일 과정을 거치는 것이 아닌, 순수 css 문법만 가지고 실시간으로 브라우저가 값을 처리하기 때문에
	: 해당 값 자체를 리액트가 fiber node에 추가해서 값을 변경처리 할 수 있음. 

*/
